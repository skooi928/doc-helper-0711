import * as vscode from 'vscode';

export class GenerateDocsViewProvider implements vscode.WebviewViewProvider {
    public static readonly viewType = 'doc-helper-generate-docs';

    constructor(private readonly _extensionUri: vscode.Uri) {}

    public resolveWebviewView(
        webviewView: vscode.WebviewView,
        context: vscode.WebviewViewResolveContext,
        _token: vscode.CancellationToken
    ) {
        webviewView.webview.options = {
            enableScripts: true,
            localResourceRoots: [this._extensionUri]
        };
        webviewView.webview.html = this.getHtmlForWebview(webviewView.webview);

        webviewView.webview.onDidReceiveMessage(async (message) => {
            if (message.command === 'generateDoc') {
                // Generate a doc.md file in the workspace root
                const folders = vscode.workspace.workspaceFolders;
                if (folders && folders.length > 0) {
                    const folderUri = folders[0].uri;
                    const docUri = vscode.Uri.joinPath(folderUri, 'doc.md');
                    const content = '# Documentation\n\nThis file was generated by Doc Helper.';
                    await vscode.workspace.fs.writeFile(docUri, Buffer.from(content, 'utf8'));
                    webviewView.webview.postMessage({ status: 'done', message: 'doc.md generated!' });
                } else {
                    webviewView.webview.postMessage({ status: 'error', message: 'No workspace folder open.' });
                }
            }
        });
    }

    private getHtmlForWebview(webview: vscode.Webview): string {
        // UI with a button that posts a message to the extension
        return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generate Docs</title>
    <style>
        body { font-family: var(--vscode-font-family, sans-serif); margin: 0; padding: 1em; }
        h2 { color: var(--vscode-editor-foreground); }
        #generate-btn {
            background: var(--vscode-button-background);
            color: var(--vscode-button-foreground);
            border: none;
            padding: 0.5em 1.2em;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1em;
        }
        #generate-btn:hover {
            background: var(--vscode-button-hover-background);
        }
    </style>
</head>
<body>
    <h2>Generate Documentation</h2>
    <button id="generate-btn">Generate Documentation</button>
    <p id="status"></p>
    <script>
        const vscode = acquireVsCodeApi();
        document.getElementById('generate-btn').addEventListener('click', () => {
            document.getElementById('status').textContent = 'Generating documentation...';
            vscode.postMessage({ command: 'generateDoc' });
        });
        window.addEventListener('message', event => {
            const msg = event.data;
            if (msg.status === 'done') {
                document.getElementById('status').textContent = msg.message;
            } else if (msg.status === 'error') {
                document.getElementById('status').textContent = msg.message;
            }
        });
    </script>
</body>
</html>`;
    }
}
