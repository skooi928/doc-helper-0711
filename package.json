{
  "name": "doc-helper-0711",
  "displayName": "Doc Helper",
  "description": "AI assistant to documentation.",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.103.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onLanguage:typescript",
    "onLanguage:typescriptreact",
    "onLanguage:javascript",
    "onLanguage:javascriptreact",
    "onLanguage:markdown"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "keybindings": [
      {
        "key": "ctrl+l",
        "command": "doc-helper-0711.toggleLink",
        "when": "editorTextFocus && editorLangId == markdown"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "doc-helper-0711",
          "title": "Doc Helper",
          "icon": "resources/icon.svg"
        }
      ]
    },
    "views": {
      "doc-helper-0711": [
        {
          "id": "doc-helper-init",
          "name": "Initialization",
          "icon": "resources/icon.svg",
          "when": "!docHelper:dochInitialized"
        },
        {
          "id": "doc-helper-chatbot",
          "name": "AI Chatbot",
          "type": "webview",
          "icon": "resources/icon.svg",
          "when": "docHelper:dochInitialized"
        }
      ],
      "explorer": [
        {
          "id": "doc-helper-stats",
          "name": "Doc Helper: Stats",
          "icon": "resources/icon.svg",
          "when": "docHelper:dochInitialized"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "doc-helper-init",
        "contents": "In order to use DocHelper, you can open a folder containing a .doch repository. (A .doch folder will be automatically generated if no prior folder was found.)\n[Open Folder](command:vscode.openFolder)\nTo learn more about how to use DocHelper and version control in VS Code [read our docs](https://aka.ms/vscode-scm).",
        "when": "workspaceFolderCount == 0"
      },
      {
        "view": "doc-helper-init",
        "contents": "This current folder has no .doch repository. To create a documentation tracking, click on the button below.\n[Init .doch Repository](command:doc-helper-0711.initDochRepo)",
        "when": "workspaceFolderCount != 0"
      }
    ],
    "commands": [
      {
        "command": "doc-helper-0711.initDochRepo",
        "title": "Doc Helper: Initialize DocHelper Repository"
      },
      {
        "command": "doc-helper-0711.refreshFileStatus",
        "title": "Doc Helper: Refresh File Status"
      },
      {
        "command": "doc-helper-0711.generateDoc",
        "title": "Generate Documentation",
        "icon": "$(request-changes)"
      },
      {
        "command": "doc-helper-0711.summarizeDoc",
        "title": "Summarize Documentation",
        "icon": "$(sparkle)"
      },
      {
        "command": "doc-helper-0711.checkDocIssue",
        "title": "Check Documentation Issues",
        "icon": "$(alert)"
      },
      {
        "command": "doc-helper-0711.searchFile",
        "title": "Search File",
        "icon": "$(search)"
      },
      {
        "command": "doc-helper-0711.ignoreFile",
        "title": "Ignore File",
        "icon": "$(eye-closed)"
      },
      {
        "command": "doc-helper-0711.openFile",
        "title": "Open File"
      },
      {
        "command": "doc-helper-0711.openRespectiveDocs",
        "title": "Open Respective Code/Docs",
        "icon": "$(book)"
      },
      {
        "command": "doc-helper-0711.toggleLink",
        "title": "Toggle Link Mode"
      },
      {
        "command": "doc-helper-0711.reportIssue",
        "title": "Doc Helper: Report Issue"
      }
    ],
    "commandPalette": [
      {
        "command": "doc-helper-0711.initDochRepo",
        "when": "docHelper:dochInitialized == false",
        "category": "Doc Helper"
      },
      {
        "command": "doc-helper-0711.refreshFileStatus",
        "when": "docHelper:dochInitialized == true",
        "category": "Doc Helper"
      },
      {
        "command": "doc-helper-0711.reportIssue",
        "when": "docHelper:dochInitialized == true",
        "category": "Doc Helper"
      }
    ],
    "menus": {
      "view/item/context": [
        {
          "command": "doc-helper-0711.generateDoc",
          "when": "view == doc-helper-stats && viewItem == Undocumented",
          "group": "inline"
        },
        {
          "command": "doc-helper-0711.summarizeDoc",
          "when": "view == doc-helper-stats && viewItem == Documented-md",
          "group": "inline"
        },
        {
          "command": "doc-helper-0711.checkDocIssue",
          "when": "view == doc-helper-stats && (viewItem == Documented-md || viewItem == Out-of-Date-md)",
          "group": "inline"
        },
        {
          "command": "doc-helper-0711.ignoreFile",
          "when": "view == doc-helper-stats && viewItem != category",
          "group": "inline@0"
        }
      ],
      "view/title": [
        {
          "command": "doc-helper-0711.searchFile",
          "when": "view == doc-helper-stats",
          "group": "navigation"
        }
      ],
      "editor/title": [
        {
          "command": "doc-helper-0711.openRespectiveDocs",
          "when": "docHelper:dochInitialized == true",
          "group": "navigation@0"
        }
      ],
      "editor/title/context": [
        {
          "command": "doc-helper-0711.toggleLink",
          "when": "resourceLangId == markdown && docHelper:dochInitialized == true",
          "group": "DocHelper@1"
        }
      ],
      "explorer/context": [
        {
          "command": "doc-helper-0711.toggleLink",
          "when": "resourceLangId == markdown && docHelper:dochInitialized == true",
          "group": "DocHelper@1"
        }
      ],
      "editor/context": [
        {
          "command": "doc-helper-0711.toggleLink",
          "when": "resourceLangId == markdown && docHelper:dochInitialized == true",
          "group": "DocHelper@1"
        }
      ]
    }
  },
  "bin": {
    "doch": "./dist/cli.js"
  },
  "scripts": {
    "start-backend": "cd backend && cd dochelper-backend && mvn spring-boot:run",
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p start-backend watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "22.x",
    "@types/vscode": "^1.103.0",
    "@typescript-eslint/eslint-plugin": "^8.39.0",
    "@typescript-eslint/parser": "^8.39.0",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "esbuild": "^0.25.8",
    "eslint": "^9.32.0",
    "npm-run-all": "^4.1.5",
    "typescript": "^5.9.2"
  },
  "dependencies": {
    "ignore": "^7.0.5"
  }
}
